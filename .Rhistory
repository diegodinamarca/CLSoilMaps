d = depths[i]
points = soil_db[,c("id", d, "x", "y")] %>%
st_as_sf(crs = 4326, coords = c("x","y"))
v = extract(fc, vect(points))
tibble(id = points$id, obs = points[[d]], sim = v[[i+1]], depth = d)
}) %>%
rlist::list.rbind()
write_csv(ext_val, here("proc","correlations","FC_correlation.csv"))
cat("matching soil db depth ",d, " with map ", names(v)[i+1])
# Extract PWP values
ext_val = lapply(1:6, function(i){
# i=1
d = depths[i]
points = soil_db[,c("id", d, "x", "y")] %>%
st_as_sf(crs = 4326, coords = c("x","y"))
v = extract(pwp, vect(points))
cat("matching soil db depth ",d, " with map ", names(v)[i+1])
tibble(id = points$id, obs = points[[d]], sim = v[[i+1]], depth = d)
}) %>%
rlist::list.rbind()
# Extract PWP values
ext_val = lapply(1:6, function(i){
# i=1
d = depths[i]
points = soil_db[,c("id", d, "x", "y")] %>%
st_as_sf(crs = 4326, coords = c("x","y"))
v = extract(pwp, vect(points))
cat("matching soil db depth ",d, " with map ", names(v)[i+1], "\n")
tibble(id = points$id, obs = points[[d]], sim = v[[i+1]], depth = d)
}) %>%
rlist::list.rbind()
fc = rast(fc.files[c(1,5,3,4,6
,2)])
fc.files = files[grep("FC",files)]
pwp.files = files[grep("PWP",files)]
fc = rast(fc.files[c(1,5,3,4,6,2)])
pwp = rast(pwp.files[c(1,5,3,4,6,2)]])
pwp = rast(pwp.files[c(1,5,3,4,6,2)])
# Load soil database ------------------------------------------------------
fname = here("proc","soil_database","FC_standard.csv")
soil_db = read_csv(fname)
# Extract FC values
depths = names(soil_db)[2:7]
ext_val = lapply(1:6, function(i){
# i=1
d = depths[i]
points = soil_db[,c("id", d, "x", "y")] %>%
st_as_sf(crs = 4326, coords = c("x","y"))
v = extract(fc, vect(points))
tibble(id = points$id, obs = points[[d]], sim = v[[i+1]], depth = d)
}) %>%
rlist::list.rbind()
ext_val = lapply(1:6, function(i){
# i=1
d = depths[i]
points = soil_db[,c("id", d, "x", "y")] %>%
st_as_sf(crs = 4326, coords = c("x","y"))
v = extract(fc, vect(points))
cat("matching soil db depth ",d, " with map ", names(v)[i+1], "\n")
tibble(id = points$id, obs = points[[d]], sim = v[[i+1]], depth = d)
}) %>%
rlist::list.rbind()
write_csv(ext_val, here("proc","correlations","FC_correlation.csv"))
# Extract PWP values
ext_val = lapply(1:6, function(i){
# i=1
d = depths[i]
points = soil_db[,c("id", d, "x", "y")] %>%
st_as_sf(crs = 4326, coords = c("x","y"))
v = extract(pwp, vect(points))
cat("matching soil db depth ",d, " with map ", names(v)[i+1], "\n")
tibble(id = points$id, obs = points[[d]], sim = v[[i+1]], depth = d)
}) %>%
rlist::list.rbind()
write_csv(ext_val, here("proc","correlations","PWP_correlation.csv"))
# Load Dataframe with observed and simulated values -----------------------
fname = here("proc","correlations","FC_correlation")
data = read_csv(fname)
# Load Dataframe with observed and simulated values -----------------------
fname = here("proc","correlations","FC_correlation.csv")
data = read_csv(fname)
data
depths
data = read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
data
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
ggpubr::stat_cor()
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
ggpubr::stat_cor(digits = 3)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
ggpubr::stat_cor(digits = 3,r.accuracy = 3)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
ggpubr::stat_cor(r.accuracy = 3)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
ggpubr::stat_cor()
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
ggpubr::stat_cor()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
ggpubr::stat_cor(p.digits = 3)+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
# calculate metrics
hydroGOF::gof(sim = data$sim, obs = data$obs)
# calculate metrics
m = hydroGOF::gof(sim = data$sim, obs = data$obs)
m["RMSE",]
# calculate metrics
m = hydroGOF::gof(sim = data$sim, obs = data$obs, norm = "maxmin")
m["r"]
m["r",]
cat("R = ", m["r",])
cat("R =", m["r",])
cat("R =", m["r",], "\n RMSE = ",m["RMSE",])
cat("R =", m["r",], "\nRMSE = ",m["RMSE",])
cat("R =", m["r",], "\nRMSE = ",m["RMSE",], "\nPBIAS",m["PBIA %"])
cat("R =", m["r",], "\nRMSE = ",m["RMSE",], "\nPBIAS= ",m["PBIAS %"])
cat("R =", m["r",], "\nRMSE = ",m["RMSE",], "\nPBIAS = ",m["PBIAS %"])
cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %"])
cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",])
cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
annotate_metrics = function(obs, sim) {
m = hydroGOF::gof(sim = data$sim, obs = data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
return(msg)
}
data %>% group_by(depth) %>% group_map(~annotate_metrics(obs, sim))
data %>% group_by(depth)
annotate_metrics = function(obs, sim) {
m = hydroGOF::gof(sim = sim, obs = obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
return(msg)
}
data %>% group_by(depth) %>% group_map(~annotate_metrics(obs, sim))
data
data %>% group_by(depth) %>% group_map(~annotate_metrics(.obs, .sim))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.$obs, .$sim))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.$obs, .$sim)) %>% unlist
data %>% group_by(depth) %>% group_map(~annotate_metrics(.$obs, .$sim))
data %>% group_by(depth) %>% do(~annotate_metrics(.$obs, .$sim))
annotate_metrics = function(obs, sim) {
m = hydroGOF::gof(sim = sim, obs = obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
return(data.frame(message = msg))
}
data %>% group_by(depth) %>% do(~annotate_metrics(.$obs, .$sim))
annotate_metrics = function(obs, sim) {
m = hydroGOF::gof(sim = sim, obs = obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
return(data.frame(message = msg))
}
data %>% group_by(depth) %>% do(~annotate_metrics(.$obs, .$sim))
data %>% group_by(depth) %>% do(~annotate_metrics(obs, sim))
annotate_metrics = function(obs, sim) {
m = hydroGOF::gof(sim = sim, obs = obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message = msg)
}
data %>% group_by(depth) %>% do(~annotate_metrics(obs, sim))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.depth$obs, .depth$sim))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.$obs, .depth$sim))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.$obs, .$sim))
annotate_metrics = function(data) {
m = hydroGOF::gof(sim = data$sim, obs = data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message = msg)
}
annotate_metrics = function(data) {
m = hydroGOF::gof(sim = data$sim, obs = data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
# data.frame(message = msg)
}
data %>% group_by(depth) %>% group_map(~annotate_metrics(.x))
data %>% group_by(depth) %>% group_map(~annotate_metrics())
data %>% group_by(depth) %>% group_map(~annotate_metrics(.))
annotate_metrics = function(data) {
m = hydroGOF::gof(sim = data$sim, obs = data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message = msg)
}
data %>% group_by(depth) %>% group_map(~annotate_metrics(.))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.), keep = TRUE)
data %>% group_by(depth) %>% group_map(~annotate_metrics(.), .keep = TRUE)
annotate_metrics = function(obs, sim) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
# data.frame(message = msg)
}
data %>% group_by(depth) %>% group_map(~annotate_metrics())
data %>% group_by(depth) %>% group_map(~annotate_metrics(obs, sim))
annotate_metrics = function(sim, obs) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
# data.frame(message = msg)
}
data %>% group_by(depth) %>% group_map(~annotate_metrics(obs, sim))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.sim, .obs))
data %>% group_by(depth) %>% group_map(~annotate_metrics(.$sim, .$obs))
data %>% group_by(depth) %>% do(~annotate_metrics(.$sim, .$obs, .$depth))
annotate_metrics = function(sim, obs, depth) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message =as.character(msg))
}
data %>% group_by(depth) %>% do(~annotate_metrics(.$sim, .$obs, .$depth))
annotate_metrics = function(sim, obs
) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message =as.character(msg))
}
annotate_metrics = function(sim, obs) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message =as.character(msg))
}
data %>% group_by(depth) %>% do(~annotate_metrics(.$sim, .$obs))
data %>% group_by(depth) %>% do(~annotate_metrics(.))
annotate_metrics = function(data) {
m = hydroGOF::gof(data$sim, data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message =as.character(msg))
}
data %>% group_by(depth) %>% do(~annotate_metrics(.))
data %>% group_by(depth) %>% do(~annotate_metrics(.x))
rlang::last_error()
rlang::last_trace()
annotate_metrics = function(data) {
m = hydroGOF::gof(data$sim, data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
data.frame(message =as.character(msg))
}
data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.x)))
data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.)))
annotate_metrics = function(data) {
m = hydroGOF::gof(data$sim, data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
}
data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.)))
annotate_metrics = function(data) {
m = hydroGOF::gof(data$sim, data$obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
as.character(msg)
}
data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.)))
data %>% group_by(depth)
annotate_metrics = function(sim, obs) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = cat("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
as.character(msg)
}
data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.$sim, .$obs)))
annotate_metrics = function(sim, obs) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = paste0("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
as.character(msg)
}
data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.$sim, .$obs)))
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, label = message)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
metrics = data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.$sim, .$obs)))
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, label = message)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
metrics
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message))+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
data
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7, size = 0.6)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7, size = 1)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7, size = 9)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0.5, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7, size = 2, hjust = 0.5)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7, size = 2, hjust = 1)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7, size = 2, hjust = -1)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0.1, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_text(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_label(data = metrics, aes(label = message), x = 0, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
theme_set(theme_bw())
metrics = data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.$sim, .$obs)))
metrics
ggplot(data, aes(x = obs, y = sim))+
geom_point()+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "Field Capacity")
ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "Field Capacity")+
facet_wrap(depth~.)
ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "a) Field Capacity")+
facet_wrap(depth~.)
# set default theme
theme_set(theme_classic() )
ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "Field Capacity")+
facet_wrap(depth~.)
# set default theme
theme_set(theme_minimal())
ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "Field Capacity")+
facet_wrap(depth~.)
# set default theme
theme_set(theme_bw())
ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "Field Capacity")+
facet_wrap(depth~.)
p = ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "Field Capacity")+
facet_wrap(depth~.)
ggsave(filename = here("results","figures","FC_correlation.png"), width = 8, height = 6, plot = p)
# Permanent Wilting Point
fname = here("proc","correlations","PWP_correlation.csv")
data = read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
# depths levels
depths <- c('0-5 cm','5-15 cm','15-30 cm', "30-60 cm","60-100 cm","100-200 cm")
# calculate metrics
annotate_metrics = function(sim, obs) {
m = hydroGOF::gof(sim, obs, norm = "maxmin")
msg = paste0("R =", m["r",], "\nRMSE =", m["RMSE",], "\nPBIAS =", m["PBIAS %",],"%")
as.character(msg)
}
metrics = data %>% group_by(depth) %>% do(data.frame(message = annotate_metrics(.$sim, .$obs)))
# set default theme
theme_set(theme_bw())
p = ggplot(data, aes(x = obs, y = sim))+
geom_point(alpha = 0.7)+
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2)+
geom_smooth(method = "lm", se = T)+
geom_abline(slope = 1, intercept = 0)+
tune::coord_obs_pred()+
labs(x = "observed", y = "simulated", title = "Permanent Wilting Point")+
facet_wrap(depth~.)
ggsave(filename = here("results","figures","PWP_correlation.png"), width = 8, height = 6, plot = p)

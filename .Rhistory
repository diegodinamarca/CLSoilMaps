ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
# Permanent Wilting Point
fname <- here("proc", "correlations", "PWP_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
# depths levels
depths <- c("0-5 cm", "5-15 cm", "15-30 cm", "30-60 cm", "60-100 cm", "100-200 cm")
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
# set default theme
theme_set(theme_bw())
p2 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.15, y = 0.4, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "B) Permanent Wilting Point") +
facet_wrap(depth ~ .)
plot(p2)
p2 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.15, y = 0.45, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "B) Permanent Wilting Point") +
facet_wrap(depth ~ .)
plot(p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.png"), width = 7, height = 5, plot = p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.eps"), width = 7, height = 5, plot = p2)
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
############# PARTE 15: FC AND PWP VALIDATION ######################
# Load Dataframe with observed and simulated values -----------------------
# depths levels
depths <- c("0-5 cm", "5-15 cm", "15-30 cm", "30-60 cm", "60-100 cm", "100-200 cm")
# Field Capacity
fname <- here("proc", "correlations", "FC_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
# calculate metrics
annotate_metrics <- function(sim, obs) {
m <- hydroGOF::gof(sim, obs, norm = "maxmin")
msg <- paste0("R2 = ", m["R2", ], "\nRMSE = ", m["RMSE", ], "\nNRMSE = ", m["NRMSE %", ], "%", "\nPBIAS = ", m["PBIAS %", ], "%")
as.character(msg)
}
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
metrics
# set default theme
theme_set(theme_bw())
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
# Field Capacity
fname <- here("proc", "correlations", "FC_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
# calculate metrics
annotate_metrics <- function(sim, obs) {
m <- hydroGOF::gof(sim, obs, norm = "maxmin")
msg <- paste0("R2 = ", m["R2", ], "\nRMSE = ", m["RMSE", ], "\nNRMSE = ", m["NRMSE %", ], "%", "\nPBIAS = ", m["PBIAS %", ], "%")
as.character(msg)
}
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
metrics
# set default theme
theme_set(theme_bw())
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.7, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.png"), width = 7, height = 5, plot = p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
# Permanent Wilting Point
fname <- here("proc", "correlations", "PWP_correlation.csv")
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.75, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.png"), width = 7, height = 5, plot = p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
# Permanent Wilting Point
fname <- here("proc", "correlations", "PWP_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
# set default theme
theme_set(theme_bw())
p2 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.15, y = 0.45, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "B) Permanent Wilting Point") +
facet_wrap(depth ~ .)
plot(p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.png"), width = 7, height = 5, plot = p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.eps"), width = 7, height = 5, plot = p2)
arrange <- ggpubr::ggarrange(
plotlist = list(p1, p2), nrow = 2, ncol = 1,
hjust = c(0.008, 0, 0)
)
arrange
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 6, height = 8)
# depths levels
depths <- c("0-5 cm", "5-15 cm", "15-30 cm", "30-60 cm", "60-100 cm", "100-200 cm")
# Field Capacity
fname <- here("proc", "correlations", "FC_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
# calculate metrics
annotate_metrics <- function(sim, obs) {
m <- hydroGOF::gof(sim, obs, norm = "maxmin")
msg <- paste0("R2 = ", m["R2", ], "\nRMSE = ", m["RMSE", ], "\nNRMSE = ", m["NRMSE %", ], "%", "\nPBIAS = ", m["PBIAS %", ], "%")
as.character(msg)
}
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
metrics
# set default theme
theme_set(theme_bw())
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.2, y = 0.75, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.png"), width = 7, height = 5, plot = p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
# Permanent Wilting Point
fname <- here("proc", "correlations", "PWP_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
# set default theme
theme_set(theme_bw())
p2 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.15, y = 0.45, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "B) Permanent Wilting Point") +
facet_wrap(depth ~ .)
plot(p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.png"), width = 7, height = 5, plot = p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.eps"), width = 7, height = 5, plot = p2)
arrange
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 9)
# set default theme
theme_set(theme_bw())
p2 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.15, y = 0.45, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "B) Permanent Wilting Point") +
facet_wrap(depth ~ .)
plot(p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.png"), width = 7, height = 5, plot = p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.eps"), width = 7, height = 5, plot = p2)
arrange <- ggpubr::ggarrange(
plotlist = list(p1, p2), nrow = 2, ncol = 1,
hjust = c(0.008, 0, 0)
)
arrange
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 9)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.eps"), width = 7, height = 9)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 8)
# depths levels
depths <- c("0-5 cm", "5-15 cm", "15-30 cm", "30-60 cm", "60-100 cm", "100-200 cm")
# Field Capacity
fname <- here("proc", "correlations", "FC_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
# calculate metrics
annotate_metrics <- function(sim, obs) {
m <- hydroGOF::gof(sim, obs, norm = "maxmin")
msg <- paste0("R2 = ", m["R2", ], "\nRMSE = ", m["RMSE", ], "\nNRMSE = ", m["NRMSE %", ], "%", "\nPBIAS = ", m["PBIAS %", ], "%")
as.character(msg)
}
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
metrics
# set default theme
theme_set(theme_bw())
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.22, y = 0.75, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.png"), width = 7, height = 5, plot = p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
# Permanent Wilting Point
fname <- here("proc", "correlations", "PWP_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
# set default theme
theme_set(theme_bw())
p2 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.15, y = 0.44, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "B) Permanent Wilting Point") +
facet_wrap(depth ~ .)
plot(p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.png"), width = 7, height = 5, plot = p2)
ggsave(filename = here("results", "figures", "PWP_correlation_R2.eps"), width = 7, height = 5, plot = p2)
arrange <- ggpubr::ggarrange(
plotlist = list(p1, p2), nrow = 2, ncol = 1,
hjust = c(0.008, 0, 0)
)
arrange
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 8)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.eps"), width = 7, height = 8)
############# PARTE 15: FC AND PWP VALIDATION ######################
# Load Dataframe with observed and simulated values -----------------------
# depths levels
depths <- c("0-5 cm", "5-15 cm", "15-30 cm", "30-60 cm", "60-100 cm", "100-200 cm")
# Field Capacity
fname <- here("proc", "correlations", "FC_correlation.csv")
data <- read_csv(fname) %>%
mutate(depth = factor(depth, levels = depths))
# calculate metrics
annotate_metrics <- function(sim, obs) {
m <- hydroGOF::gof(sim, obs, norm = "maxmin")
msg <- paste0("R2 = ", m["R2", ], "\nRMSE = ", m["RMSE", ], "\nNRMSE = ", m["NRMSE %", ], "%", "\nPBIAS = ", m["PBIAS %", ], "%")
as.character(msg)
}
metrics <- data %>%
group_by(depth) %>%
do(data.frame(message = annotate_metrics(.$sim, .$obs)))
metrics
# set default theme
theme_set(theme_bw())
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.25, y = 0.75, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.png"), width = 7, height = 5, plot = p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
arrange
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 8)
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.28, y = 0.75, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.png"), width = 7, height = 5, plot = p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
arrange
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 8)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.eps"), width = 7, height = 8)
p1 <- ggplot(data, aes(x = obs, y = sim)) +
geom_point(alpha = 0.7, size = 0.7) +
geom_label(data = metrics, aes(label = message), x = 0.3, y = 0.75, size = 2) +
geom_smooth(method = "lm", se = T) +
geom_abline(slope = 1, intercept = 0) +
tune::coord_obs_pred() +
labs(x = "observed", y = "simulated", title = "A) Field Capacity") +
facet_wrap(depth ~ .)
plot(p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.png"), width = 7, height = 5, plot = p1)
ggsave(filename = here("results", "figures", "FC_correlation_R2.eps"), width = 7, height = 5, plot = p1)
arrange <- ggpubr::ggarrange(
plotlist = list(p1, p2), nrow = 2, ncol = 1,
hjust = c(0.008, 0, 0)
)
arrange
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 8)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.eps"), width = 7, height = 8)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 6, height = 6)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 9, height = 6)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 9, height = 9)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 12, height = 9)
ggsave(filename = here("results", "figures", "PWPandFC_correlation.png"), width = 7, height = 9)
data
bd <- read_csv(here("data","soil_database","BD_soilprof_23MAR.csv"))
tex <- bd %>% filter(Arcilla != -999)
da <- bd %>% filter(Da != -999)
clay <- tex %>% dplyr::select(ID, val = Arcilla)
sand <- tex %>% dplyr::select(ID, val = arena)
silt <- tex %>% dplyr::select(ID, val = Limo)
da <- da %>% dplyr::select(ID, val = Da)
pmp = filter(bd, CC != -999) %>% select(ID, val = CC)
fc = filter(bd, PMP !=-999) %>% select(ID, val = PMP)
fc
cc = filter(bd, CC != -999) %>% select(ID, val = CC)
pmp = filter(bd, PMP !=-999) %>% select(ID, val = PMP)
df6 <- pmp %>% summarise(max = max(val),
min = min(val),
promedio = mean(val),
mediana = median(val),
desv = sd(val),
total = n())%>%
mutate(n_profiles = nprof, propiedad = "Perm. Wilt. Point")
bd_summary <- bind_rows(df1,df2,df3,df4,df5,df6)
# Resumen estadistico por propiedad
{
nprof <- clay %>% group_by(ID) %>% slice(1) %>% nrow
df1 <- clay %>% summarise(max = max(val),
min = min(val),
promedio = mean(val),
mediana = median(val),
desv = sd(val),
total = n()) %>%
mutate(n_profiles = nprof, propiedad = "Clay")
nprof <- sand %>% group_by(ID) %>% slice(1) %>% nrow
df2 <- sand %>% summarise(max = max(val),
min = min(val),
promedio = mean(val),
mediana = median(val),
desv = sd(val),
total = n())%>%
mutate(n_profiles = nprof, propiedad = "Sand")
nprof <- silt %>% group_by(ID) %>% slice(1) %>% nrow
df3 <- silt %>% summarise(max = max(val),
min = min(val),
promedio = mean(val),
mediana = median(val),
desv = sd(val),
total = n())%>%
mutate(n_profiles = nprof, propiedad = "Silt")
nprof <- da %>% group_by(ID) %>% slice(1) %>% nrow
df4 <- da %>% summarise(max = max(val),
min = min(val),
promedio = mean(val),
mediana = median(val),
desv = sd(val),
total = n())%>%
mutate(n_profiles = nprof, propiedad = "Bulk Density")
nprof <- cc %>% group_by(ID) %>% slice(1) %>% nrow
df5 <- cc %>% summarise(max = max(val),
min = min(val),
promedio = mean(val),
mediana = median(val),
desv = sd(val),
total = n())%>%
mutate(n_profiles = nprof, propiedad = "Field Cap.")
df6 <- pmp %>% summarise(max = max(val),
min = min(val),
promedio = mean(val),
mediana = median(val),
desv = sd(val),
total = n())%>%
mutate(n_profiles = nprof, propiedad = "Perm. Wilt. Point")
}
bd_summary <- bind_rows(df1,df2,df3,df4,df5,df6)
bd_summary %>% write_csv(here("results","tables","summary_bd.csv"))
bd <- read_csv(here("data","soil_database","BD_soilprof_23MAR.csv"))
bd.p = bd %>% select(ID, Fuente, Arcilla, PMP, CC, Da) %>% pivot_longer(cols = Arcilla:Da, names_to = "soil_att")
bd.p %>% filter(value != -999) %>%   mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(Fuente, soil_att) %>%
summarise(count = n())
bd.p %>% filter(value != -999) %>%   mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
group_by(Fuente, soil_att) %>%
summarise(count = n())
bd %>% select(ID, x,y, Fuente, Arcilla, Da) %>% pivot_longer(cols = Arcilla:Da, names_to = "soil_att")
bd.p = bd %>% select(ID, x,y, Fuente, Arcilla, Da, CC, PMP) %>% pivot_longer(cols = Arcilla:PMP, names_to = "soil_att")
bd.p
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att)
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
pivot_wider(names_from = "soil_att", values_from = "value")
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1)
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup()
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
pivot_wider(names_from = "soil_att", values_from = "value")
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
drop_na() %>%
pivot_wider(names_from = "soil_att", values_from = "value")
bd <- bd %>% filter(Arcilla != -999 | Da != -999)
bd %>% group_by(Fuente) %>% summarise(n = n())
bd
bd %>% filter(Arcilla != -999 | Da != -999)
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
group_by(Fuente, soil_att) %>%
summarise(count = n())
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
group_by(Fuente, soil_att) %>%
summarise(count = n()) %>%
pivot_wider(names_from = 'soil_att', values_from = 'count')
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
summarise(count = n()) %>%
pivot_wider(names_from = 'soil_att', values_from = 'count')
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(Fuente, soil_att) %>%
summarise(count = n()) %>%
pivot_wider(names_from = 'soil_att', values_from = 'count')
bd.p %>% filter(value != -999)
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
group_by(Fuente, soil_att) %>%
summarise(count = n()) %>%
pivot_wider(names_from = 'soil_att', values_from = 'count')
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
group_by(Fuente, soil_att) %>%
summarise(count = n())
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(ID, Fuente, soil_att) %>%
slice(1) %>%
ungroup() %>%
group_by(Fuente, soil_att) %>%
summarise(count = n()) %>%
pivot_wider(names_from = 'soil_att', values_from = 'count')
bd.p %>% filter(value != -999) %>%
mutate(Fuente = if_else(Fuente == "Otros", "UChile",Fuente)) %>%
group_by(Fuente, soil_att) %>%
summarise(count = n()) %>%
pivot_wider(names_from = 'soil_att', values_from = 'count')
bd.p %>% filter(ID == 2108)
bd %>% filter(ID == 2108)
